group_by(crop, emoji) %>% head()
readycrops <-
crops %>%
filter(SubCounty != "KENYA") %>%
pivot_longer(cols = 3:ncol(crops), names_to = 'crop') %>%
left_join(emojicrops) %>%
mutate(emoji = paste0(emoji, ".png")) %>%
group_by(crop, emoji) %>% head()
summarise(sum = sum(value))
# readycrops <-
crops %>%
filter(SubCounty != "KENYA") %>%
pivot_longer(cols = 3:ncol(crops), names_to = 'crop') %>%
left_join(emojicrops) %>%
mutate(emoji = paste0(emoji, ".png"))
library(waffle)
library(waffle)
readycrops %>%
ggplot(aes(fill = crop, values = value)) +
geom_waffle()
readycrops %>%
ggplot(aes(fill = crop, values = value)) +
geom_waffle(aes(times = value / 100))
readycrops %>% head()
readycrops %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value)) +
geom_waffle(aes(times = value / 100))
crops %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value)) +
geom_waffle(aes(times = value / 100))
crops %>% head()
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value)) +
geom_waffle(aes(times = value / 100))
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value)) +
geom_waffle(aes(times = value / 10000))
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value/1000)) +
geom_waffle()
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value/1000000)) +
geom_waffle()
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value/1000000)) +
geom_waffle()
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value/100000)) +
geom_waffle()
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value/100000)) +
# geom_waffle()
scale_label_pictogram()
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = crop, values = value/10000)) +
geom_waffle(n_rows = 10)
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/10000)) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop)
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/10000)) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme(legend.position = "bottom")
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/10000)) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "bottom")
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/100000)) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "bottom")
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/1000)) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "bottom")
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/1000), colour = NA) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "bottom")
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/1000), colour = NA) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "")
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/50000), colour = NA) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "")
crops %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/5000), colour = NA) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "")
crops %>%
filter(SubCounty != "KENYA")
crops %>%
filter(SubCounty != "KENYA") %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/5000), colour = NA) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "")
crops %>%
filter(SubCounty != "KENYA") %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/1000), colour = NA) +
geom_waffle(n_rows = 10) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "")
crops %>%
filter(SubCounty != "KENYA") %>%
pivot_longer(cols = 3:ncol(crops), names_to = "crop") %>%
filter(!is.na(value)) %>%
ggplot(aes(fill = SubCounty, values = value/1000), colour = NA) +
geom_waffle(n_rows = 10, make_proportional = T) +
facet_wrap(~crop) +
theme_void() +
theme(legend.position = "")
knitr::opts_chunk$set(echo = TRUE)
library(echarts4r)
library(echarts4r.assets)
library(tidyverse)
plastics <- tidytuesdayR::use_tidytemplate()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
tt <- tt_load("2021-01-26")
tt
tt %>%
map(glimpse)
# This will save your most recent plot
ggsave(
filename = "My TidyTuesday Plot.png",
device = "png")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
tt <- tt_load("2021-01-26")
tt
tt %>%
map(glimpse)
flights <- read.csv(
paste0("https://raw.githubusercontent.com/plotly/datasets/",
"master/2011_february_aa_flight_paths.csv")
)
flights %>%
e_charts() %>%
e_globe(
environment = ea_asset("starfield"),
base_texture = ea_asset("world topo"),
height_texture = ea_asset("world topo"),
displacementScale = 0.05
) %>%
e_lines_3d(
start_lon,
start_lat,
end_lon,
end_lat,
name = "flights",
effect = list(show = TRUE)
) %>%
e_legend(FALSE)
# Wrangle
Explore the data and process it into a nice format for plotting! Access each dataset by name by using a dollarsign after the `tt` object and then the name of the data set.
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
tt <- tt_load("2021-01-26")
tt
tt %>%
map(glimpse)
# This will save your most recent plot
ggsave(
filename = "My TidyTuesday Plot.png",
device = "png")
plastics = tuesdata$plastics %>%
filter(
!(parent_company %in% c("Grand Total", "null", "Null", "Unbranded"))
) %>%
mutate(
parent_company = parent_company %>%
tolower() %>%
stri_trans_general("Latin-ASCII") %>%
stri_trans_totitle(),
country = stri_trans_totitle(country)
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
tt <- tt_load("2021-01-26")
tt
tt %>%
map(glimpse)
tuesdata <- tt
plastics = tuesdata$plastics %>%
filter(
!(parent_company %in% c("Grand Total", "null", "Null", "Unbranded"))
) %>%
mutate(
parent_company = parent_company %>%
tolower() %>%
stri_trans_general("Latin-ASCII") %>%
stri_trans_totitle(),
country = stri_trans_totitle(country)
)
plastics <- tuesdata$plastics %>%
filter(
!(parent_company %in% c("Grand Total", "null", "Null", "Unbranded"))
) %>%
mutate(
parent_company = parent_company %>%
tolower() %>%
stri_trans_general("Latin-ASCII") %>%
stri_trans_totitle(),
country = stri_trans_totitle(country)
)
tuesdata <- tt
tuesdata$plastics %>% dplyr::filter()
plastics <- tuesdata$plastics %>%
filter(
!(parent_company %in% c("Grand Total", "null", "Null", "Unbranded"))
) %>%
mutate(
parent_company = parent_company %>%
tolower() %>%
stri_trans_general("Latin-ASCII") %>%
stri_trans_totitle(),
country = stringi::stri_trans_totitle(country)
)
# stringi::stri_trans_totitle()
plastics <- tuesdata$plastics %>%
filter(
!(parent_company %in% c("Grand Total", "null", "Null", "Unbranded"))
) %>%
mutate(
parent_company = parent_company %>%
tolower() %>%
stri_trans_general("Latin-ASCII") %>%
stri_trans_totitle(),
country = stringi::stri_trans_totitle(country)
)
tuesdata <- tt
tuesdata$plastics %>% dplyr::filter()
library(stringi)
plastics <- tuesdata$plastics %>%
filter(
!(parent_company %in% c("Grand Total", "null", "Null", "Unbranded"))
) %>%
mutate(
parent_company = parent_company %>%
tolower() %>%
stri_trans_general("Latin-ASCII") %>%
stri_trans_totitle(),
country = stringi::stri_trans_totitle(country)
)
top_Co = plastics %>%
group_by(parent_company) %>%
summarise(
country_count = n_distinct(country),
grand_total_sum = sum(grand_total, na.rm = T)
) %>%
arrange(desc(country_count, grand_total_sum)) %>%
head(5)
top_Co
hq = c(
"Atlanta, Georgia, United States", #Coca-Cola
"New York, New York, United States", #PepsiCo
"Vevey, Vaud, Switzerland", #Nestle
"Mclean, Virginia, United States", #Mars
"London, England, United Kingdom" #Unilever
)
coords = geo(hq, method = "osm")
install.packages("tidygeocoder")
library(tidygeocoder)
coords = geo(hq, method = "osm")
# To avoid calling the geocoder on each knit
coords = structure(list(address = c("Atlanta, Georgia, United States",
"New York, New York, United States", "Vevey, Vaud, Switzerland",
"Mclean, Virginia, United States", "London, England, United Kingdom"), lat = c(33.7489924, 40.7127281, 46.4602978, 38.9342888, 51.5073219), long = c(-84.3902644, -74.0060152, 6.8418655, -77.1776327, -0.1276474)), row.names = c(NA, -5L), class = c("tbl_df",
"tbl", "data.frame"))
top_parent_companies = top_Co %>%
mutate(hq = hq, lat = coords$lat, long = coords$long) %>%
st_as_sf(crs = 4326, coords = c("long", "lat")) %>%
mutate(parent_company = case_when(
parent_company == "The Coca-Cola Company" ~ "Coca-Cola",
parent_company == "Mars, Incorporated" ~ "Mars, Inc.",
TRUE ~ parent_company
)) %>%
select(name = parent_company) %>%
mutate(type = "Parent Company")
coords_country = structure(list(address = c("Argentina", "Australia", "Bangladesh", "Benin", "Brazil", "Bulgaria", "Burkina Faso", "Cameroon", "Canada", "Chile", "China", "Colombia", "Cyprus", "Denmark", "Ecuador", "El Salvador", "Empty", "France", "Germany", "Ghana", "Greece", "Honduras", "Hong Kong", "India", "Indonesia", "Ireland", "Italy", "Japan", "Kenya", "Korea", "Kuwait", "Latvia", "Lithuania", "Malaysia", "Maldives", "Mexico", "Montenegro", "Netherlands", "Nigeria", "Peru", "Philippines", "Portugal", "Romania", "Rwanda", "Serbia", "Singapore", "Slovenia", "South Africa", "Spain", "Sri Lanka", "Switzerland", "Taiwan_ Republic Of China (Roc)", "Tanzania", "Thailand", "Togo", "Tunisia", "Turkey", "Ukraine", "United Kingdom Of Great Britain & Northern Ireland", "United States Of America", "Vietnam"), lat = c(-34.9964963, -24.7761086, 24.4768783, 9.5293472, -10.3333333, 42.6073975, 12.0753083, 4.6125522, 61.0666922, -31.7613365, 35.000074, 2.8894434, 34.9823018, 55.670249, -1.3397668, 13.8000382, 39.74962805, 46.603354,
51.0834196, 8.0300284, 38.9953683, 15.2572432, 22.2793278, 22.3511148, -2.4833826, 52.865196, 42.6384261, 36.5748441, 1.4419683, 36.638392, 29.2733964, 56.8406494, 55.3500003, 4.5693754, 4.7064352, 22.5000485, 42.9868853, 52.24764975, 9.6000359, -6.8699697, 12.7503486, 40.0332629, 45.9852129, -1.9646631, 44.1534121, 1.357107, 46.14903455, -28.8166236, 39.3260685, 7.5554942, 46.7985624, 23.9739374, -6.5247123, 14.8971921, 8.7800265, 33.8439408, 38.9597594, 49.4871968, 54.7023545, 39.7837304, 13.2904027), long = c(-64.9672817, 134.755, 90.2932426, 2.2584408, -53.2, 25.4856617, -1.6880314, 13.1535811, -107.9917071, -71.3187697, 104.999927, -73.783892, 33.1451285, 10.3333283, -79.3666965, -88.9140683, -104.946658106006, 1.8883335, 10.4234469, -1.0800271, 21.9877132, -86.0755145, 114.1628131, 78.6677428, 117.8902853, -7.9794599, 12.674297, 139.2394179, 38.4313975, 127.6961188, 47.4979476, 24.7537645, 23.7499997, 102.2656823, 73.3287853, -100.0000375, 19.5180992, 5.54124684940616, 7.9999721, -75.0458515, 122.7312101, -7.8896263, 24.6859225, 30.0644358, 20.55144, 103.8194992, 14.6263257533406, 24.991639, -4.8379791, 80.7137847, 8.2319736, 120.9820179, 35.7878438, 100.83273, 1.0199765, 9.400138, 34.9249653, 31.2718321, -3.2765753, -100.4458825, 108.4265113)), row.names = c(NA, -61L), class = c("tbl_df", "tbl", "data.frame"))
countries = plastics %>%
filter(parent_company %in% top_Co$parent_company) %>%
group_by(country) %>%
summarise(count = n())
install.packages("sf")
install.packages("sfnetworks")
library(sf)
top_parent_companies = top_Co %>%
mutate(hq = hq, lat = coords$lat, long = coords$long) %>%
st_as_sf(crs = 4326, coords = c("long", "lat")) %>%
mutate(parent_company = case_when(
parent_company == "The Coca-Cola Company" ~ "Coca-Cola",
parent_company == "Mars, Incorporated" ~ "Mars, Inc.",
TRUE ~ parent_company
)) %>%
select(name = parent_company) %>%
mutate(type = "Parent Company")
countries = plastics %>%
filter(parent_company %in% top_Co$parent_company) %>%
group_by(country) %>%
summarise(count = n())
coords_countries = geo(countries$country, method = "osm")
# Get Taiwan coordinates, which was not recognized
coords_taiwan = geo("Taiwan", method = "osm")
coords_country = coords_countries %>%
mutate(
lat = ifelse(address == "Taiwan_ Republic Of China (Roc)", coords_taiwan$lat, lat),
long = ifelse(address == "Taiwan_ Republic Of China (Roc)", coords_taiwan$long, long)
)
coords_country = structure(list(address = c("Argentina", "Australia", "Bangladesh", "Benin", "Brazil", "Bulgaria", "Burkina Faso", "Cameroon", "Canada", "Chile", "China", "Colombia", "Cyprus", "Denmark", "Ecuador", "El Salvador", "Empty", "France", "Germany", "Ghana", "Greece", "Honduras", "Hong Kong", "India", "Indonesia", "Ireland", "Italy", "Japan", "Kenya", "Korea", "Kuwait", "Latvia", "Lithuania", "Malaysia", "Maldives", "Mexico", "Montenegro", "Netherlands", "Nigeria", "Peru", "Philippines", "Portugal", "Romania", "Rwanda", "Serbia", "Singapore", "Slovenia", "South Africa", "Spain", "Sri Lanka", "Switzerland", "Taiwan_ Republic Of China (Roc)", "Tanzania", "Thailand", "Togo", "Tunisia", "Turkey", "Ukraine", "United Kingdom Of Great Britain & Northern Ireland", "United States Of America", "Vietnam"), lat = c(-34.9964963, -24.7761086, 24.4768783, 9.5293472, -10.3333333, 42.6073975, 12.0753083, 4.6125522, 61.0666922, -31.7613365, 35.000074, 2.8894434, 34.9823018, 55.670249, -1.3397668, 13.8000382, 39.74962805, 46.603354,
51.0834196, 8.0300284, 38.9953683, 15.2572432, 22.2793278, 22.3511148, -2.4833826, 52.865196, 42.6384261, 36.5748441, 1.4419683, 36.638392, 29.2733964, 56.8406494, 55.3500003, 4.5693754, 4.7064352, 22.5000485, 42.9868853, 52.24764975, 9.6000359, -6.8699697, 12.7503486, 40.0332629, 45.9852129, -1.9646631, 44.1534121, 1.357107, 46.14903455, -28.8166236, 39.3260685, 7.5554942, 46.7985624, 23.9739374, -6.5247123, 14.8971921, 8.7800265, 33.8439408, 38.9597594, 49.4871968, 54.7023545, 39.7837304, 13.2904027), long = c(-64.9672817, 134.755, 90.2932426, 2.2584408, -53.2, 25.4856617, -1.6880314, 13.1535811, -107.9917071, -71.3187697, 104.999927, -73.783892, 33.1451285, 10.3333283, -79.3666965, -88.9140683, -104.946658106006, 1.8883335, 10.4234469, -1.0800271, 21.9877132, -86.0755145, 114.1628131, 78.6677428, 117.8902853, -7.9794599, 12.674297, 139.2394179, 38.4313975, 127.6961188, 47.4979476, 24.7537645, 23.7499997, 102.2656823, 73.3287853, -100.0000375, 19.5180992, 5.54124684940616, 7.9999721, -75.0458515, 122.7312101, -7.8896263, 24.6859225, 30.0644358, 20.55144, 103.8194992, 14.6263257533406, 24.991639, -4.8379791, 80.7137847, 8.2319736, 120.9820179, 35.7878438, 100.83273, 1.0199765, 9.400138, 34.9249653, 31.2718321, -3.2765753, -100.4458825, 108.4265113)), row.names = c(NA, -61L), class = c("tbl_df", "tbl", "data.frame"))
affected_countries = countries %>%
left_join(coords_country, by = c("country" = "address")) %>%
st_as_sf(crs = 4326, coords = c("long", "lat")) %>%
select(name = country) %>%
mutate(type = "Affected Country")
affected_countries
affected_countries %>%
unnest(geometry)
countries %>%
left_join(coords_countryby = c("country" = "address"))
countries %>%
left_join(coords_countryby,  by = c("country" = "address"))
countries %>%
left_join(coords_country,  by = c("country" = "address"))
plastics %>%
head()
top_parent_companies
top_Co
top_parent_companies = top_Co %>%
mutate(hq = hq, lat = coords$lat, long = coords$long) %>%
# st_as_sf(crs = 4326, coords = c("long", "lat")) %>%
mutate(parent_company = case_when(
parent_company == "The Coca-Cola Company" ~ "Coca-Cola",
parent_company == "Mars, Incorporated" ~ "Mars, Inc.",
TRUE ~ parent_company
)) %>%
select(name = parent_company) %>%
mutate(type = "Parent Company")
top_parent_companies
top_Co %>%
mutate(hq = hq, lat = coords$lat, long = coords$long)
companies <- top_Co %>%
mutate(hq = hq, com_lat = coords$lat, com_long = coords$long)
companies %>% head()
plastics
plastics %>%
select(country, parent_company, grand_total)
com_countries <- plastics %>%
select(country, parent_company, grand_total)
com_countries %>%
left_join(countries, by = c(country,))
com_countries %>%
left_join(countries, by = c(country))
com_countries %>%
left_join(countries, by = country)
com_countries %>%
left_join(countries)
com_countries %>%
left_join(countries)
countries <- countries %>%
left_join(coords_country,  by = c("country" = "address"))
countries
com_countries <- plastics %>%
select(country, parent_company, grand_total)
com_countries %>%
left_join(countries)
countries
# countries
com_countries
companies
# companies
com_countries %>%
left_join(countries) %>%
left_join(companies)
# companies
com_countries %>%
left_join(countries) %>%
left_join(companies) %>%
filter(parent_company %in% com_countries$parent_company)
# companies
com_countries %>%
left_join(countries) %>%
left_join(companies) %>%
filter(parent_company %in% companies$parent_company)
# companies
plotting <- com_countries %>%
left_join(countries) %>%
left_join(companies) %>%
filter(parent_company %in% companies$parent_company)
plotting
plotting %>%
e_charts() %>%
e_globe(
base_texture = ea_asset("world topo")
) %>%
e_lines_3d(
com_long,
com_lat,
long,
lat,
name = "trash",
effect = list(show = TRUE)
)
plotting %>%
e_charts() %>%
e_globe(
base_texture = ea_asset("world topo")
) %>%
e_lines_3d(
com_long,
com_lat,
long,
lat,
name = parent_company,
effect = list(show = TRUE),
)
plotting %>%
e_charts() %>%
e_globe(
base_texture = ea_asset("world topo")
) %>%
e_lines_3d(
com_long,
com_lat,
long,
lat,
name = "parent_company",
effect = list(show = TRUE),
)
plotting %>%
e_charts() %>%
e_globe(
environment = ea_asset("starfield"),
base_texture = ea_asset("world topo"),
height_texture = ea_asset("world topo"),
displacement = 0.05
) %>%
e_lines_3d(
com_long,
com_lat,
long,
lat,
name = "parent_company",
effect = list(show = TRUE),
)
